pipeline {
    agent any
    
    // Corrigindo os nomes das ferramentas para corresponder às configurações do Jenkins
    tools {
        maven 'maven3'
        jdk 'java11'
    }
    
    parameters {
        string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/cilsocarvalho/devops-demo-project.git'
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh '''
                    cd demo-java-app
                    mvn clean package -X
                '''
                // Arquivando artefatos e resultados de teste
                post {
                    success {
                        archiveArtifacts artifacts: 'demo-java-app/target/*.jar', fingerprint: true
                        junit 'demo-java-app/target/surefire-reports/*.xml'
                    }
                }
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://sonarqube:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd demo-java-app
                        mvn sonar:sonar \
                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.projectKey=demo-java-app \
                            -Dsonar.projectName=demo-java-app
                    '''
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "famacil/demo-java-app:${params.build_version}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}", "-f demo-java-app/Dockerfile demo-java-app")
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-cred',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                            docker push ${DOCKER_IMAGE}
                        '''
                    }
                }
            }
        }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "devops-demo-project"
                GIT_USER_NAME = "cilsocarvalho"
            }
            steps {
                withCredentials([string(credentialsId: 'GITHUB', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "cilsocarvalho@gmail.com"
                        git config user.name "Cilso Carvalho"
                        sed -i "s/tag: .*/tag: \\"${params.build_version}\\"/" helm/app/values.yaml
                        git add helm/app/values.yaml
                        git commit -m "Update deployment image to version ${params.build_version}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed! Sending notification...'
        }
    }
}
