pipeline {
    agent any
    
    parameters {
        string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
        choice(name: 'environment', choices: ['dev', 'qa', 'prod'], description: 'Deployment environment')
        booleanParam(name: 'run_tests', defaultValue: true, description: 'Run unit tests')
    }
    
    environment {
        DOCKER_IMAGE = "famacil/demo-java-app:${params.build_version}"
        SONAR_URL = "http://sonarqube:9000"
        GIT_REPO_NAME = "devops-demo-project"
        GIT_USER_NAME = "cilsocarvalho"
    }
    
    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: 'main', url: 'https://github.com/cilsocarvalho/devops-demo-project.git'
            }
        }
        
        stage('Build and Test') {
            steps {
                script {
                    try {
                        sh 'cd demo-java-app && mvn clean package'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Maven build failed: ${e.message}"
                    }
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'demo-java-app/target/*.jar', fingerprint: true
                    junit 'demo-java-app/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Static Code Analysis') {
            when {
                expression { params.environment != 'prod' }
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            cd demo-java-app
                            mvn sonar:sonar \
                                -Dsonar.login=$SONAR_AUTH_TOKEN \
                                -Dsonar.host.url=${SONAR_URL} \
                                -Dsonar.projectKey=demo-java-app \
                                -Dsonar.projectName="Demo Java App" \
                                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                        '''
                    }
                }
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                sh 'mvn dependency-check:check'
                dependencyCheck additionalArguments: '--format HTML --format XML',
                               odcInstallation: 'OWASP-Dependency-Check'
            }
            post {
                always {
                    publishHTML(
                        [
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'target',
                            reportFiles: 'dependency-check-report.html',
                            reportName: 'Dependency Check Report'
                        ]
                    )
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        def dockerImage = docker.build("${DOCKER_IMAGE}", './demo-java-app')
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
            post {
                success {
                    sh "trivy image ${DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Update Deployment File') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "cilsocarvalho@gmail.com"
                        git config user.name "Cilso Carvalho"
                        
                        sed -i "s/tag: .*/tag: \\"${build_version}\\"/" helm/app/values.yaml
                        yq eval ".environment = \\"${environment}\\"" -i helm/app/values.yaml
                        
                        git add helm/app/values.yaml
                        git commit -m "Update deployment image to version ${build_version} for ${environment} environment"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
        
        stage('Deploy to Environment') {
            when {
                expression { params.environment == 'prod' }
                beforeInput true
            }
            input {
                message "Deploy to Production?"
                ok "Yes"
                submitter "admin"
            }
            steps {
                sh """
                    helm upgrade --install demo-app ./helm/app \
                        --namespace ${params.environment} \
                        --set image.tag=${params.build_version} \
                        --wait --timeout 5m
                """
            }
            post {
                success {
                    echo "Deployment to ${params.environment} successful!"
                }
                failure {
                    echo "Deployment to ${params.environment} failed!"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            emailext(
                subject: "Pipeline Status: ${currentBuild.result}",
                body: """
                    Job: ${env.JOB_NAME}
                    Build: ${env.BUILD_NUMBER}
                    Status: ${currentBuild.result}
                    
                    Check console output at: ${env.BUILD_URL}
                """,
                to: 'cilsocarvalho@gmail.com'
            )
        }
    }
}